/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockHashPowerStorage,
  MockHashPowerStorageInterface,
} from "../../../contracts/mocks/MockHashPowerStorage";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "getHashPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_power",
        type: "uint256",
      },
    ],
    name: "setHashPower",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060015b600a8111603b57600081815260208190526040902060649055806034816040565b9150506013565b506066565b600060018201605f57634e487b7160e01b600052601160045260246000fd5b5060010190565b610114806100756000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806341e24669146037578063bf8249b6146056575b600080fd5b6054604236600460a5565b60009182526020829052604090912055565b005b6065606136600460c6565b6077565b60405190815260200160405180910390f35b600081815260208190526040812054608f576064609f565b6000828152602081905260409020545b92915050565b6000806040838503121560b757600080fd5b50508035926020909101359150565b60006020828403121560d757600080fd5b503591905056fea26469706673582212202ab50f3e48fe32ec33a23eaab76a630f28a42fa51229727c377dfd3c84d071d564736f6c634300081b0033";

type MockHashPowerStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockHashPowerStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockHashPowerStorage__factory extends ContractFactory {
  constructor(...args: MockHashPowerStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockHashPowerStorage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockHashPowerStorage__factory {
    return super.connect(runner) as MockHashPowerStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockHashPowerStorageInterface {
    return new Interface(_abi) as MockHashPowerStorageInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockHashPowerStorage {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockHashPowerStorage;
  }
}
