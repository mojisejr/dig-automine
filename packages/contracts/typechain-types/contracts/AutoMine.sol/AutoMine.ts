/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AutoMineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "BOT_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_FEE_PERCENTAGE"
      | "claimReward"
      | "currentMine"
      | "deposit"
      | "digDragonContract"
      | "emergencyUnstake"
      | "feeCollector"
      | "feePercentage"
      | "getContractStats"
      | "getRoleAdmin"
      | "getUserInfo"
      | "grantRole"
      | "hasRole"
      | "hashPowerStorage"
      | "onERC721Received"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setDigDragonContract"
      | "setFeePercentage"
      | "setMine"
      | "supportsInterface"
      | "switchMine"
      | "targetMine"
      | "tokenOwner"
      | "totalStakedTokens"
      | "totalUsers"
      | "unpause"
      | "userInfo"
      | "withdrawAllNFT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyUnstake"
      | "FeePercentageUpdated"
      | "MineAddressUpdated"
      | "MineSwitch"
      | "NFTDeposited"
      | "NFTWithdrawn"
      | "Paused"
      | "RewardClaimed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BOT_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentMine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "digDragonContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnstake",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashPowerStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDigDragonContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMine",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "switchMine",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "targetMine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllNFT",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BOT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "digDragonContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashPowerStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDigDragonContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "switchMine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "targetMine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllNFT",
    data: BytesLike
  ): Result;
}

export namespace EmergencyUnstakeEvent {
  export type InputTuple = [
    admin: AddressLike,
    user: AddressLike,
    tokenIds: BigNumberish[]
  ];
  export type OutputTuple = [admin: string, user: string, tokenIds: bigint[]];
  export interface OutputObject {
    admin: string;
    user: string;
    tokenIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeePercentageUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MineAddressUpdatedEvent {
  export type InputTuple = [
    mineType: AddressLike,
    oldAddress: AddressLike,
    newAddress: AddressLike
  ];
  export type OutputTuple = [
    mineType: string,
    oldAddress: string,
    newAddress: string
  ];
  export interface OutputObject {
    mineType: string;
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MineSwitchEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    totalTokens: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, totalTokens: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    totalTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenIds: BigNumberish[],
    totalHashPower: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenIds: bigint[],
    totalHashPower: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenIds: bigint[];
    totalHashPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTWithdrawnEvent {
  export type InputTuple = [user: AddressLike, tokenIds: BigNumberish[]];
  export type OutputTuple = [user: string, tokenIds: bigint[]];
  export interface OutputObject {
    user: string;
    tokenIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    grossReward: BigNumberish,
    fee: BigNumberish,
    netReward: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    grossReward: bigint,
    fee: bigint,
    netReward: bigint
  ];
  export interface OutputObject {
    user: string;
    grossReward: bigint;
    fee: bigint;
    netReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AutoMine extends BaseContract {
  connect(runner?: ContractRunner | null): AutoMine;
  waitForDeployment(): Promise<this>;

  interface: AutoMineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  BOT_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  claimReward: TypedContractMethod<[], [void], "nonpayable">;

  currentMine: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<
    [_tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  digDragonContract: TypedContractMethod<[], [string], "view">;

  emergencyUnstake: TypedContractMethod<
    [_user: AddressLike, _tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  feeCollector: TypedContractMethod<[], [string], "view">;

  feePercentage: TypedContractMethod<[], [bigint], "view">;

  getContractStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, string, string] & {
        totalTokens: bigint;
        activeUsers: bigint;
        current: string;
        target: string;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserInfo: TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint[], bigint, bigint, boolean] & {
        tokenIds: bigint[];
        totalHashPower: bigint;
        lastRewardClaim: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hashPowerStorage: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setDigDragonContract: TypedContractMethod<
    [_nftAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeePercentage: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMine: TypedContractMethod<
    [_current: AddressLike, _target: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  switchMine: TypedContractMethod<
    [_targetMine: AddressLike],
    [void],
    "nonpayable"
  >;

  targetMine: TypedContractMethod<[], [string], "view">;

  tokenOwner: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  totalStakedTokens: TypedContractMethod<[], [bigint], "view">;

  totalUsers: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        totalHashPower: bigint;
        lastRewardClaim: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  withdrawAllNFT: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BOT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentMine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[_tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "digDragonContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyUnstake"
  ): TypedContractMethod<
    [_user: AddressLike, _tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string, string] & {
        totalTokens: bigint;
        activeUsers: bigint;
        current: string;
        target: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint[], bigint, bigint, boolean] & {
        tokenIds: bigint[];
        totalHashPower: bigint;
        lastRewardClaim: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashPowerStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDigDragonContract"
  ): TypedContractMethod<[_nftAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeePercentage"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMine"
  ): TypedContractMethod<
    [_current: AddressLike, _target: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "switchMine"
  ): TypedContractMethod<[_targetMine: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "targetMine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenOwner"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalStakedTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        totalHashPower: bigint;
        lastRewardClaim: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawAllNFT"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "EmergencyUnstake"
  ): TypedContractEvent<
    EmergencyUnstakeEvent.InputTuple,
    EmergencyUnstakeEvent.OutputTuple,
    EmergencyUnstakeEvent.OutputObject
  >;
  getEvent(
    key: "FeePercentageUpdated"
  ): TypedContractEvent<
    FeePercentageUpdatedEvent.InputTuple,
    FeePercentageUpdatedEvent.OutputTuple,
    FeePercentageUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MineAddressUpdated"
  ): TypedContractEvent<
    MineAddressUpdatedEvent.InputTuple,
    MineAddressUpdatedEvent.OutputTuple,
    MineAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MineSwitch"
  ): TypedContractEvent<
    MineSwitchEvent.InputTuple,
    MineSwitchEvent.OutputTuple,
    MineSwitchEvent.OutputObject
  >;
  getEvent(
    key: "NFTDeposited"
  ): TypedContractEvent<
    NFTDepositedEvent.InputTuple,
    NFTDepositedEvent.OutputTuple,
    NFTDepositedEvent.OutputObject
  >;
  getEvent(
    key: "NFTWithdrawn"
  ): TypedContractEvent<
    NFTWithdrawnEvent.InputTuple,
    NFTWithdrawnEvent.OutputTuple,
    NFTWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "EmergencyUnstake(address,address,uint256[])": TypedContractEvent<
      EmergencyUnstakeEvent.InputTuple,
      EmergencyUnstakeEvent.OutputTuple,
      EmergencyUnstakeEvent.OutputObject
    >;
    EmergencyUnstake: TypedContractEvent<
      EmergencyUnstakeEvent.InputTuple,
      EmergencyUnstakeEvent.OutputTuple,
      EmergencyUnstakeEvent.OutputObject
    >;

    "FeePercentageUpdated(uint256,uint256)": TypedContractEvent<
      FeePercentageUpdatedEvent.InputTuple,
      FeePercentageUpdatedEvent.OutputTuple,
      FeePercentageUpdatedEvent.OutputObject
    >;
    FeePercentageUpdated: TypedContractEvent<
      FeePercentageUpdatedEvent.InputTuple,
      FeePercentageUpdatedEvent.OutputTuple,
      FeePercentageUpdatedEvent.OutputObject
    >;

    "MineAddressUpdated(address,address,address)": TypedContractEvent<
      MineAddressUpdatedEvent.InputTuple,
      MineAddressUpdatedEvent.OutputTuple,
      MineAddressUpdatedEvent.OutputObject
    >;
    MineAddressUpdated: TypedContractEvent<
      MineAddressUpdatedEvent.InputTuple,
      MineAddressUpdatedEvent.OutputTuple,
      MineAddressUpdatedEvent.OutputObject
    >;

    "MineSwitch(address,address,uint256)": TypedContractEvent<
      MineSwitchEvent.InputTuple,
      MineSwitchEvent.OutputTuple,
      MineSwitchEvent.OutputObject
    >;
    MineSwitch: TypedContractEvent<
      MineSwitchEvent.InputTuple,
      MineSwitchEvent.OutputTuple,
      MineSwitchEvent.OutputObject
    >;

    "NFTDeposited(address,uint256[],uint256)": TypedContractEvent<
      NFTDepositedEvent.InputTuple,
      NFTDepositedEvent.OutputTuple,
      NFTDepositedEvent.OutputObject
    >;
    NFTDeposited: TypedContractEvent<
      NFTDepositedEvent.InputTuple,
      NFTDepositedEvent.OutputTuple,
      NFTDepositedEvent.OutputObject
    >;

    "NFTWithdrawn(address,uint256[])": TypedContractEvent<
      NFTWithdrawnEvent.InputTuple,
      NFTWithdrawnEvent.OutputTuple,
      NFTWithdrawnEvent.OutputObject
    >;
    NFTWithdrawn: TypedContractEvent<
      NFTWithdrawnEvent.InputTuple,
      NFTWithdrawnEvent.OutputTuple,
      NFTWithdrawnEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RewardClaimed(address,uint256,uint256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
